
=> update lambda
 aws lambda update-function-code --function-name create-blur-gif --zip-file fileb://Lambda-functions-1.0-SNAPSHOT.jar


=> upload to s3
aws s3 cp a.jpg s3://image-processing-app-uploads/ --region "us-east-1"


=> sync frontned
 aws s3 sync . s3://image-processing-frontend



- UPLOAD RESIZES / COMPRESSES IMAGE 


=> GIF GENERATION




UPLOAD
- Host static website with index.html + some js. Enable CORS?
	- host index html and check it shows - DONE
	- reference js and checks a function is called -- DONE
	- optimize update with CLI commands -- DONE 
- Create Api gateway project
- Enable CORS on API gateway
- Api gateway POST call lambda, url /image/upload
	- check method is called - done
	- Create FORM for uploading FILE - done
        - ERRORES CORS =>>>>>>>>>>>>>>>>> TODO
        - LATENCIA UPLOAD =>>>>>>>>>>>>> TODO
	- Check lambda receives file >>>>>>>> DONE
	- Save to S3 with UUUID >>>>>>>> DONE
	- Returns UUIID >>>>>>>> DONE
	- CORREGIR METADATA ETC >>>>>>>> DONE
      

GET
- BUTTON for GET image request
- APi gateway with AWS integration for url /image/get/UUID
	- check method is called ========> done
	- Role for reading Destination Bucket =>> DONE
	- Read Image from S3  => DONE
	- Return image to user => DONE   
	- Button for being able to download =>> DONE
	

SHORT POLLING
- js logic After receiving Image Id from UPLOAD Request, initiate short polling to GET ==> DONE 
- Showing Image in front-end. ==> DONE 
- Download button HTML? ==> DONE
- GIFs visualized in front-end correctly?  ==> DONE


DISEÑO GRAL FRONT END

TITULO
INFO: que es, diagrama arquitectura, link github <==================================================TODO

UPLOAD YOUR IMAGE

GIF 1

GIF 2

GIF 3 


-StartUp: se muestran gifs por defecto  ==> DONE 

-Upload: 
- los gifs deberían mostrar un "Loading..." <==================================================TODO
- comienza un short polling hacia la URL del bucket fileupload ===== DONE 





FANOUT
- For processing in parallel I need SQS

IMAGE PROCESSING
- Lambda triggered by bucket - done
- Lambda reading Image from bucket and saving it to another - done
- Image processing Logic - TODO
- Converting to GIF




BIG FIXES
- SOLUCIOANR CORS ON ERROR ===> DONE
- QUE LA API GATEWAY DEVUELVA 404...NO 500  ===> DONE 
- FIJARSE SI EL LOG TIRA MAL EL SDK CLIENT     <==================================================TODO
- VER IS Y OS , Y SIZE, EN LAMBDAS     <==================================================TODO
- QUE EL SHORT POLLING SOLO SEA EN 404, X CIERTO TIEMPO, Y DESPUES PARE.   ===> DONE

-FIX LOGGING    <==================================================TODO
-FIX XRAY   <==================================================TODO



- EL BOTON DE DOWNLOAD NO ANDA  <==================================================TODO
- PONER LOS GIFS UNO AL LADO DE CADA UNO <==================================================TODO
- REPLACE FILE TYPE DURING DOWNLOAD  <==================================================TODO
- MODAL CARGANDO DURANTE EL UPLOAD   <==================================================TODO
- MODARL PROCESAMIENTO     <==================================================TODO
- VALIDACION LIMITE MAS FILE TYPE 3MB LAMBDA  <==================================================TODO
- FIX CORS 413....SI VALIDO NO HACE FALTA


-BUG javax.imageio.IIOException: Error reading PNG image data  Unexpected end of ZLIB input stream <==

API GATEWAY <=> LAMBDA => LAMBDA * 1 => S3 => 



https://x7t7f93zpk.execute-api.us-east-1.amazonaws.com/test1/s3?key=image-processing-app-destination/resized-1f109e40-d81e-4300-9b90-73270f425573

https://x7t7f93zpk.execute-api.us-east-1.amazonaws.com/test1/s3?key=s3.amazonaws.com/image-processing-app-destination/resized-1f109e40-d81e-4300-9b90-73270f425573


https://x7t7f93zpk.execute-api.us-east-1.amazonaws.com/test1/s3?key=image-processing-app-destination/22e811f9-23a6-42a1-8c1d-2aaaca64479a.jpg



https://x7t7f93zpk.execute-api.us-east-1.amazonaws.com/test1/s3?key=image-processing-app-uploads/image.jpg


-----------------


FANOUT

FRONT-END DONE 
RE-ESTRUCTURACION FRONT-END <=== DONE
PONER 2 CUADRITOS MAS, CON GIF INICIAL DISTINTO EN START UP <=== DONE
CUANDO LE DAS UPLOAD, TIENEN QUE COMENZAR EL SHORT POLLING EN SIMULTANEO LAS 3 IMAGENES A DISTINTAS URLS  /resized-1 resized-2 residez-3  <=== DONE
GENERIFICAR LAS FUNCIONES PARA QUE LOS IDS DE LOS ELEMENTOS PASEN COMO PARAMETROS    <=== DONE
QUE SIGA FUNCIONANDO COMO ESTA <=== DONE
TRIPLICAR EL FRONT-END CON NUEVOS IDS <=== DONE
LLAMAR EN EL START-UP A LA MISMA FUNCION   <=== DONE





INTEGRACION
- HAY QUE CREAR 3 QEUUES, UNA PARA CADA LAMBDA
-CONFIGURACION
       - SI CREO PRIMERO EL ROL DE SNS YA Puedo especificarlo aca en la seccion de permiss <==============================
	- MaximumReceives antes de descartar o SQS
        -tiEMPO, dsp de eso se dscarta


- NECESITAS ACCESS POLICY PARA QUE S3 TRI
- ENTIENDO QUE NECESITAS ACCESS-POLICIES PARA QUE SNS LE ESCRIBA A SQS. SI!! <==============================
- PUEDO CREAR UNA DLQ Y QUE COMPARTAN?? PODES USAR LAMBDA DESTINATIONS ISNO.
- CONFIGURAR RETENCION, RETRIES, DLQ, LO QUE SEA. 
- EL BUCKET DE S3 TIENE QUE TRIGGEREAR SNS. NECESITAS ACCESS POLICY <================
- SNS TIENE QUE MANDAR A 3 QUEUES,  
- REVISAR API DE SQS PARA POLLEAR EL MENSAJE
- PENSAR SI HAY IMPACTO CON PUT SI HAY REPETIDOS, ES IDEMPOTENTE NO? (SE PISA) 
- Recomendacion: visibility timeout 6 veces el timeout de tu lambda.  <==============================



- VER ALGO DE SQS, VER CREACION, CONFIGURACION
- VER SI HABLA ALGO DE LAMBDA CON SQS
- VER ALGO DE SNS
- VER SI HABLA S3->SNS
- VER SI HABLA FANOUT

API::
Must known APIs.
=> NO VOY A USAR APIS, PORQUE ME LO VA A LLAMAR EL EVENT SOURCE MAPPING




BACKEND - ALGORITMOS
FUNCION LAMBDA GenerateGifRecursive ALGORITMO DE GENERACION DE GIF CUSTOM
FUNCION LAMBDA GenerateGifCyclic ALGORITMO DE GENERACION  DE GIF CUSTOM

BAKCEND - CREACION DE LAS LAMBRAS
- SDK SQS para leer mensajes. <================= NO Hace falta, solo evento de SQS
- HACE FALTA HACER DELETE DEL MSJ, O LO HACE LAMBDA?!=!=!   <==================================================
- ambdas lambdas, al igual que la que ya cree, tienen que tener
- ACTIVAR X-RAY
- CONFIGURAR EL HANDLER REFERENCIANDOA A LA CLASE CORRESPONDIENTE 
- roles IAM con acceso a S3 para poder leer del bucket   <==============================
- LOS LAMBDAS TIENEN QUE TENER LambdaSQSExecutionROle policy, para leer de SQS (si no te lo crea
el EVENT SOURCE MAPPING)    <==============================


- ABSTRAER EL CODIGO DEL LAMBDA YA EXISTENTE PARA SER REUSADO POR LOS TRES
- Al momento de guardar, usar una KEY distinta
- AHORA RECIBEN UN EVENTO DE SNS, no uno de S3.
- Conectar esa KEY con el front-end !!


S3 ==EVENT NOTIFICATION===> (((((SNS))))) ==== SUBSCRIPCION ==> (((SQS)))) ====LOS LAMBDAS TIENEN QUE POLLEAR===> (((((LAMBDA)))))


-------------

readme, cual era la gracia sin esto
una EC2 para todo,
==> mas barato esto, realmente
escalar x separado

Lambda =>
reuso de imagen comprimida
timeout 


Pasos:
crear SNS topic
access policy para que le escriba s3
mandar las notification de S3 a este topico, 
suscribir lambda que ya tengo al topico este de sns


s3EVENT.getRecords() => eventNotificationRecords



